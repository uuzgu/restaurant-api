// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantApi.Data;

#nullable disable

namespace RestaurantApi.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20250510123540_AddStripeSessionId")]
    partial class AddStripeSessionId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("RestaurantApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bowls"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hamburgers"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Salads"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Soups"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Desserts"
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.CustomerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("comment")
                        .HasAnnotation("Relational:JsonPropertyName", "comment");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name")
                        .HasAnnotation("Relational:JsonPropertyName", "lastName");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("customer_info", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.DrinkOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("drink_options", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            ItemId = 3,
                            Name = "Cola",
                            Price = 1.0m
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 3,
                            Name = "Fanta",
                            Price = 2.0m
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 6,
                            Description = "Classic carbonated soft drink",
                            Name = "Cola",
                            Price = 4
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            Description = "Salad with fresh vegetables and cheese",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/salad.jpg",
                            Name = "Salad",
                            Price = 8
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "A delightful plant-based pizza with a variety of fresh toppings",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/veganpizza.jpg",
                            Name = "Vegan Pizza",
                            Price = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Filled with fresh ingredients, perfect for a healthy and satisfying meal.",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/bowll.jpg",
                            Name = "Bowl",
                            Price = 10
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 6,
                            Description = "Pure, crisp, and refreshing still water",
                            Name = "Water",
                            Price = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "Traditional Turkish yogurt-based drink, cool and refreshing with a creamy texture",
                            Name = "Ayran",
                            Price = 2
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 6,
                            Description = "A light, refreshing lemon-lime soda with a crisp, bubbly taste to quench your thirst",
                            Name = "Sprite",
                            Price = 3
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Classic pizza with rich tomato sauce, fresh mozzarella, and basil",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/margarita.jpg",
                            Name = "Margarita Pizza",
                            Price = 9
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 6,
                            Description = "A premium Turkish soda, light and refreshing, perfect for pairing with your meal.",
                            Name = "Soda",
                            Price = 2
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Description = "A delicious burger made with a juicy beef patty, crispy bacon, melted cheese, and fresh onions, all nestled in a soft bun",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/baconburger.jpg",
                            Name = "Baconburger",
                            Price = 6
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "Classic American cheeseburger",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/cheeseburger.jpg",
                            Name = "Cheeseburger",
                            Price = 7
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            Description = "A healthy salad with grilled chicken, fresh veggies, and dressing",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/chickensalad.jpg",
                            Name = "Chicken Salad",
                            Price = 9
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Description = "A savory pizza topped with grilled chicken and fresh vegetables",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/chickenpizza.jpg",
                            Name = "Chicken Pizza",
                            Price = 10
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Description = "A flavorful pizza with spicy sausage and cheese",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/sausagepizza.jpg",
                            Name = "Sausage Pizza",
                            Price = 10
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            Description = "A delicious breakfast with bacon, eggs, and fresh vegetables",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/baconbreakfast.jpg",
                            Name = "Bacon Breakfast Menu",
                            Price = 12
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 7,
                            Description = "Spicy, sweet, and fragrant with lemongrass, lime, and tender chicken",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/thaisoup.jpg",
                            Name = "Thai Coconut Chicken Soup",
                            Price = 7
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 7,
                            Description = "Rich, earthy, and velvety with sautéed mushrooms and a hint of garlic",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/mushroomsoup.jpg",
                            Name = "Creamy Wild Mushroom Soup",
                            Price = 6
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 7,
                            Description = "Smooth, tangy, and topped with a swirl of cream and fresh basil",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/tomatosoup.jpg",
                            Name = "Roasted Tomato Basil Soup",
                            Price = 6
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 8,
                            Description = "Warm, gooey center served with a scoop of vanilla ice cream",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/moltendessert.jpg",
                            Name = "Molten Chocolate Lava Cake",
                            Price = 5
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 8,
                            Description = "Zesty lemon curd topped with pillowy toasted meringue in a buttery crust",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/lemontartdessert.jpg",
                            Name = "Lemon Meringue Tart",
                            Price = 5
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 8,
                            Description = "Layers of fluffy cake, whipped cream, and fresh strawberries",
                            ImageUrl = "https://restaurant-images33.s3.eu-north-1.amazonaws.com/strawberrydessert.jpg",
                            Name = "Strawberry Shortcake Parfait",
                            Price = 6
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<bool>("CanExclude")
                        .HasColumnType("INTEGER")
                        .HasColumnName("can_exclude");

                    b.Property<decimal>("ExtraCost")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_cost");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_mandatory");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("item_ingredients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanExclude = false,
                            ExtraCost = 0m,
                            IsMandatory = false,
                            ItemId = 3,
                            Name = "Dough"
                        },
                        new
                        {
                            Id = 2,
                            CanExclude = false,
                            ExtraCost = 0m,
                            IsMandatory = false,
                            ItemId = 3,
                            Name = "Tomato Sauce"
                        },
                        new
                        {
                            Id = 3,
                            CanExclude = false,
                            ExtraCost = 0m,
                            IsMandatory = false,
                            ItemId = 3,
                            Name = "Mozzarella"
                        },
                        new
                        {
                            Id = 4,
                            CanExclude = false,
                            ExtraCost = 0m,
                            IsMandatory = false,
                            ItemId = 3,
                            Name = "Basil"
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<int>("OfferId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("offer_id");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OfferId");

                    b.ToTable("item_offers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 3,
                            OfferId = 1
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 8,
                            OfferId = 1
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 13,
                            OfferId = 1
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 14,
                            OfferId = 1
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("offers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "20% off on all pizzas",
                            DiscountPercentage = 20.0m,
                            EndDate = "2025-05-21 14:32:26.987536",
                            IsActive = true,
                            Name = "Happy Hour",
                            StartDate = "2025-04-21 14:32:26.987483"
                        },
                        new
                        {
                            Id = 2,
                            Description = "15% off with student ID",
                            DiscountPercentage = 15.0m,
                            EndDate = "2025-07-20 14:32:26.987655",
                            IsActive = true,
                            Name = "Student Discount",
                            StartDate = "2025-04-21 14:32:26.987655"
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("CustomerInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderMethod")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("order_method");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_method");

                    b.Property<string>("SpecialNotes")
                        .HasColumnType("TEXT")
                        .HasColumnName("special_notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("StripeSessionId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("stripe_session_id");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CustomerInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.OrderLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.SideOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("side_options", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 3,
                            Name = "French Fries",
                            Price = 2.0m
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 3,
                            Name = "Onion Rings",
                            Price = 3.0m
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 3,
                            Name = "Salad",
                            Price = 4.0m
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT")
                        .HasColumnName("Address");

                    b.Property<string>("Bell")
                        .HasColumnType("TEXT")
                        .HasColumnName("Bell");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("Comment");

                    b.Property<string>("Door")
                        .HasColumnType("TEXT")
                        .HasColumnName("Door");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("House")
                        .HasColumnType("TEXT")
                        .HasColumnName("House");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("Phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Stairs")
                        .HasColumnType("TEXT")
                        .HasColumnName("Stairs");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.CustomerInfo", b =>
                {
                    b.OwnsOne("RestaurantApi.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerInfoId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Bell")
                                .HasColumnType("TEXT")
                                .HasColumnName("bell")
                                .HasAnnotation("Relational:JsonPropertyName", "bell");

                            b1.Property<string>("Door")
                                .HasColumnType("TEXT")
                                .HasColumnName("door")
                                .HasAnnotation("Relational:JsonPropertyName", "door");

                            b1.Property<string>("House")
                                .HasColumnType("TEXT")
                                .HasColumnName("house")
                                .HasAnnotation("Relational:JsonPropertyName", "house");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("TEXT")
                                .HasColumnName("postal_code")
                                .HasAnnotation("Relational:JsonPropertyName", "postalCode");

                            b1.Property<string>("Stairs")
                                .HasColumnType("TEXT")
                                .HasColumnName("stairs")
                                .HasAnnotation("Relational:JsonPropertyName", "stairs");

                            b1.Property<string>("Stick")
                                .HasColumnType("TEXT")
                                .HasColumnName("stick")
                                .HasAnnotation("Relational:JsonPropertyName", "stick");

                            b1.Property<string>("Street")
                                .HasColumnType("TEXT")
                                .HasColumnName("street")
                                .HasAnnotation("Relational:JsonPropertyName", "street");

                            b1.HasKey("CustomerInfoId");

                            b1.ToTable("customer_info");

                            b1.HasAnnotation("Relational:JsonPropertyName", "address");

                            b1.WithOwner()
                                .HasForeignKey("CustomerInfoId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("RestaurantApi.Models.DrinkOption", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("DrinkOptions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.HasOne("RestaurantApi.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemIngredient", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("ItemIngredients")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemOffer", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("ItemOffers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApi.Models.Offer", "Offer")
                        .WithMany("ItemOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.HasOne("RestaurantApi.Models.CustomerInfo", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerInfoId");

                    b.HasOne("RestaurantApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CustomerInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantApi.Models.OrderLineItem", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantApi.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantApi.Models.SideOption", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("SideOptions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.Navigation("DrinkOptions");

                    b.Navigation("ItemIngredients");

                    b.Navigation("ItemOffers");

                    b.Navigation("SideOptions");
                });

            modelBuilder.Entity("RestaurantApi.Models.Offer", b =>
                {
                    b.Navigation("ItemOffers");
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
