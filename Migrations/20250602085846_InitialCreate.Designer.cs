// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantApi.Data;

#nullable disable

namespace RestaurantApi.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20250602085846_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("RestaurantApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.CategorySelectionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<int>("SelectionGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("selection_group_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SelectionGroupId");

                    b.ToTable("category_selection_groups", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<decimal>("DiscountRatio")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_ratio");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<int>("IsPeriodic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_periodic");

                    b.Property<int>("IsUsed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_used");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("RestaurantApi.Models.CouponHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CouponId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coupon_id");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_at");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("coupons_history");
                });

            modelBuilder.Entity("RestaurantApi.Models.CouponSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BeginTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("begin_time");

                    b.Property<int>("CouponId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coupon_id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("end_time");

                    b.Property<int>("Friday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("friday");

                    b.Property<int>("Monday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("monday");

                    b.Property<int>("Saturday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("saturday");

                    b.Property<int>("Sunday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sunday");

                    b.Property<int>("Thursday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("thursday");

                    b.Property<int>("Tuesday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tuesday");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int>("Wednesday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("wednesday");

                    b.HasKey("Id");

                    b.HasIndex("CouponId")
                        .IsUnique();

                    b.ToTable("coupon_schedule");
                });

            modelBuilder.Entity("RestaurantApi.Models.CustomerOrderInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Bell")
                        .HasColumnType("TEXT")
                        .HasColumnName("bell")
                        .HasAnnotation("Relational:JsonPropertyName", "bell");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("comment")
                        .HasAnnotation("Relational:JsonPropertyName", "comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("create_date")
                        .HasAnnotation("Relational:JsonPropertyName", "createDate");

                    b.Property<string>("Door")
                        .HasColumnType("TEXT")
                        .HasColumnName("door")
                        .HasAnnotation("Relational:JsonPropertyName", "door");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<string>("House")
                        .HasColumnType("TEXT")
                        .HasColumnName("house")
                        .HasAnnotation("Relational:JsonPropertyName", "house");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name")
                        .HasAnnotation("Relational:JsonPropertyName", "lastName");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("postal_code")
                        .HasAnnotation("Relational:JsonPropertyName", "postalCode");

                    b.Property<string>("Stairs")
                        .HasColumnType("TEXT")
                        .HasColumnName("stairs")
                        .HasAnnotation("Relational:JsonPropertyName", "stairs");

                    b.Property<string>("Stick")
                        .HasColumnType("TEXT")
                        .HasColumnName("stick")
                        .HasAnnotation("Relational:JsonPropertyName", "stick");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT")
                        .HasColumnName("street")
                        .HasAnnotation("Relational:JsonPropertyName", "street");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("customerOrder_info", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bell")
                        .HasColumnType("TEXT")
                        .HasColumnName("bell");

                    b.Property<string>("Door")
                        .HasColumnType("TEXT")
                        .HasColumnName("door");

                    b.Property<string>("House")
                        .HasColumnType("TEXT")
                        .HasColumnName("house");

                    b.Property<int>("PostcodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("postcode_id");

                    b.Property<string>("Stairs")
                        .HasColumnType("TEXT")
                        .HasColumnName("stairs");

                    b.Property<string>("Stick")
                        .HasColumnType("TEXT")
                        .HasColumnName("stick");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.HasIndex("PostcodeId");

                    b.ToTable("delivery_addresses", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemAllergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllergenCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("allergen_code");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("item_allergens", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<bool>("CanExclude")
                        .HasColumnType("INTEGER")
                        .HasColumnName("can_exclude");

                    b.Property<decimal>("ExtraCost")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_cost");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_mandatory");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("item_ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanExclude = false,
                            ExtraCost = 0m,
                            IsMandatory = false,
                            ItemId = 3,
                            Name = "Dough"
                        },
                        new
                        {
                            Id = 2,
                            CanExclude = false,
                            ExtraCost = 0m,
                            IsMandatory = false,
                            ItemId = 3,
                            Name = "Tomato Sauce"
                        },
                        new
                        {
                            Id = 3,
                            CanExclude = false,
                            ExtraCost = 0m,
                            IsMandatory = false,
                            ItemId = 3,
                            Name = "Mozzarella"
                        },
                        new
                        {
                            Id = 4,
                            CanExclude = false,
                            ExtraCost = 0m,
                            IsMandatory = false,
                            ItemId = 3,
                            Name = "Basil"
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<int>("OfferId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("offer_id");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OfferId");

                    b.ToTable("item_offers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 3,
                            OfferId = 1
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 8,
                            OfferId = 1
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 13,
                            OfferId = 1
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 14,
                            OfferId = 1
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemSelectionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<int>("SelectionGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("selection_group_id");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SelectionGroupId");

                    b.ToTable("item_selection_groups", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("offers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "20% off on all pizzas",
                            DiscountPercentage = 20.0m,
                            EndDate = "2025-05-21 14:32:26.987536",
                            IsActive = true,
                            Name = "Happy Hour",
                            StartDate = "2025-04-21 14:32:26.987483"
                        },
                        new
                        {
                            Id = 2,
                            Description = "15% off with student ID",
                            DiscountPercentage = 15.0m,
                            EndDate = "2025-07-20 14:32:26.987655",
                            IsActive = true,
                            Name = "Student Discount",
                            StartDate = "2025-04-21 14:32:26.987655"
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("CustomerInfoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("customer_info_id");

                    b.Property<string>("OrderMethod")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("order_method");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_method");

                    b.Property<string>("SpecialNotes")
                        .HasColumnType("TEXT")
                        .HasColumnName("special_notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("stripe_session_id");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CustomerInfoId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ItemDetails")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("item_details");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.Postcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("district");

                    b.HasKey("Id");

                    b.ToTable("postcodes", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.PostcodeMinimumOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MinimumOrderValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("MinimumOrderValue");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Postcode");

                    b.HasKey("Id");

                    b.ToTable("PostcodeMinimumOrders", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<decimal>("DisplayPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("display_price");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBundle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_bundle");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("promotions", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.SelectionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_required");

                    b.Property<int>("MaxSelect")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_select");

                    b.Property<int>("MinSelect")
                        .HasColumnType("INTEGER")
                        .HasColumnName("min_select");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Threshold")
                        .HasColumnType("INTEGER")
                        .HasColumnName("threshold");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("selection_groups", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.SelectionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("display_order");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.Property<int>("SelectionGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("selection_group_id");

                    b.HasKey("Id");

                    b.HasIndex("SelectionGroupId");

                    b.ToTable("selection_options", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.CategorySelectionGroup", b =>
                {
                    b.HasOne("RestaurantApi.Models.Category", "Category")
                        .WithMany("CategorySelectionGroups")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApi.Models.SelectionGroup", "SelectionGroup")
                        .WithMany("CategorySelectionGroups")
                        .HasForeignKey("SelectionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SelectionGroup");
                });

            modelBuilder.Entity("RestaurantApi.Models.CouponHistory", b =>
                {
                    b.HasOne("RestaurantApi.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("RestaurantApi.Models.CouponSchedule", b =>
                {
                    b.HasOne("RestaurantApi.Models.Coupon", "Coupon")
                        .WithOne("Schedule")
                        .HasForeignKey("RestaurantApi.Models.CouponSchedule", "CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("RestaurantApi.Models.DeliveryAddress", b =>
                {
                    b.HasOne("RestaurantApi.Models.Postcode", "Postcode")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("PostcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postcode");
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.HasOne("RestaurantApi.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemAllergen", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("ItemAllergens")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemIngredient", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemOffer", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("ItemOffers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApi.Models.Offer", "Offer")
                        .WithMany("ItemOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemSelectionGroup", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("ItemSelectionGroups")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApi.Models.SelectionGroup", "SelectionGroup")
                        .WithMany("ItemSelectionGroups")
                        .HasForeignKey("SelectionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SelectionGroup");
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.HasOne("RestaurantApi.Models.CustomerOrderInfo", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerInfoId");

                    b.Navigation("CustomerInfo");
                });

            modelBuilder.Entity("RestaurantApi.Models.OrderDetails", b =>
                {
                    b.HasOne("RestaurantApi.Models.Order", "Order")
                        .WithOne("OrderDetails")
                        .HasForeignKey("RestaurantApi.Models.OrderDetails", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantApi.Models.Promotion", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.SelectionOption", b =>
                {
                    b.HasOne("RestaurantApi.Models.SelectionGroup", "SelectionGroup")
                        .WithMany("Options")
                        .HasForeignKey("SelectionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SelectionGroup");
                });

            modelBuilder.Entity("RestaurantApi.Models.Category", b =>
                {
                    b.Navigation("CategorySelectionGroups");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("RestaurantApi.Models.Coupon", b =>
                {
                    b.Navigation("Schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.Navigation("ItemAllergens");

                    b.Navigation("ItemOffers");

                    b.Navigation("ItemSelectionGroups");
                });

            modelBuilder.Entity("RestaurantApi.Models.Offer", b =>
                {
                    b.Navigation("ItemOffers");
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("RestaurantApi.Models.Postcode", b =>
                {
                    b.Navigation("DeliveryAddresses");
                });

            modelBuilder.Entity("RestaurantApi.Models.SelectionGroup", b =>
                {
                    b.Navigation("CategorySelectionGroups");

                    b.Navigation("ItemSelectionGroups");

                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
