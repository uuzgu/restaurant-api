// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantApi.Data;

#nullable disable

namespace RestaurantApi.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20250510112904_FixItemConfiguration")]
    partial class FixItemConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("RestaurantApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Appetizers"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Main Courses"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drinks"
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.DrinkOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("drink_options", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Toasted bread with garlic butter",
                            Name = "Garlic Bread",
                            Price = 5
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Fresh romaine lettuce with Caesar dressing",
                            Name = "Caesar Salad",
                            Price = 8
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Fresh salmon with lemon butter sauce",
                            Name = "Grilled Salmon",
                            Price = 24
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "Rich chocolate cake with ganache",
                            Name = "Chocolate Cake",
                            Price = 7
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Description = "Freshly squeezed orange juice",
                            Name = "Fresh Orange Juice",
                            Price = 4
                        });
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<bool>("CanExclude")
                        .HasColumnType("INTEGER")
                        .HasColumnName("can_exclude");

                    b.Property<decimal>("ExtraCost")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_cost");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_mandatory");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("item_ingredients", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<int>("OfferId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("offer_id");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OfferId");

                    b.ToTable("item_offers", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("offers", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.OrderLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.SideOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("side_options", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT")
                        .HasColumnName("Address");

                    b.Property<string>("Bell")
                        .HasColumnType("TEXT")
                        .HasColumnName("Bell");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("Comment");

                    b.Property<string>("Door")
                        .HasColumnType("TEXT")
                        .HasColumnName("Door");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("House")
                        .HasColumnType("TEXT")
                        .HasColumnName("House");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("Phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Stairs")
                        .HasColumnType("TEXT")
                        .HasColumnName("Stairs");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RestaurantApi.Models.DrinkOption", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("DrinkOptions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.HasOne("RestaurantApi.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemIngredient", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("ItemIngredients")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.ItemOffer", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("ItemOffers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApi.Models.Offer", "Offer")
                        .WithMany("ItemOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.HasOne("RestaurantApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantApi.Models.OrderLineItem", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantApi.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantApi.Models.SideOption", b =>
                {
                    b.HasOne("RestaurantApi.Models.Item", "Item")
                        .WithMany("SideOptions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RestaurantApi.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RestaurantApi.Models.Item", b =>
                {
                    b.Navigation("DrinkOptions");

                    b.Navigation("ItemIngredients");

                    b.Navigation("ItemOffers");

                    b.Navigation("SideOptions");
                });

            modelBuilder.Entity("RestaurantApi.Models.Offer", b =>
                {
                    b.Navigation("ItemOffers");
                });

            modelBuilder.Entity("RestaurantApi.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
